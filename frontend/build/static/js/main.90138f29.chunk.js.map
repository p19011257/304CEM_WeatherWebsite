{"version":3,"sources":["data/weatherapi.js","App.js","reportWebVitals.js","index.js"],"names":["getWeatherData","city","a","axios","get","data","getWeatherData2","App","useState","weatherdata","setWeatherData","weatherdata2","setWeatherData2","setCity","weatherCountry","weatherTemperature","weatherMaxTemperature","weatherMinTemperature","weathers","setWeathers","getData","data1","console","log","message","useEffect","fetch","then","res","ok","json","jsonRes","className","type","onChange","e","target","value","placeholder","onClick","class","event","preventDefault","newWeather","name","current","temp_c","parseFloat","main","temp_max","toFixed","temp_min","sys","country","post","src","weather","icon","alt","humidity","map","id","_id","delete","alert","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.90138f29.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst apikey= '4cf90ee7d3ed1258cc61f07da82f3db0';\r\nconst apikey1= '2f8e47a3e81a408a8da144926212909';\r\n//const city= 'Singapore';\r\n\r\nexport const getWeatherData = async (city) =>{\r\n    try{\r\n        const{data}= await axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apikey}`);\r\n        return data;\r\n    }\r\n    catch(error){\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport const getWeatherData2 = async (city) =>{\r\n    try{\r\n        const{data}= await axios.get(`https://api.weatherapi.com/v1/current.json?key=${apikey1}&q=${city}}`);\r\n        return data;\r\n    }\r\n    catch(error){\r\n        throw error;\r\n    }\r\n}\r\n","import React,{useState,useEffect} from 'react'\nimport './App.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport axios from 'axios';\nimport{getWeatherData} from './data/weatherapi';\nimport{getWeatherData2} from './data/weatherapi';\nimport { eventNames } from 'node-notifier';\n//import Weather from './data/databaseconnect';\n\nfunction App() { \n  const [weatherdata, setWeatherData]=useState(null);\n  const [weatherdata2, setWeatherData2]=useState(null);\n  const[city,setCity]=useState('');\n  const[weathers,setWeathers]=useState([{\n        weatherCountry:'',\n        weatherTemperature:'',\n        weatherMaxTemperature:'',\n        weatherMinTemperature:''\n  }]);\n  \n  const[loading,setLoading]=useState(false);\n  \n  function deleteWeather(id){\n    axios.delete('/delete/'+id);\n    alert(\"Weather Deleted\");\n  }\n  const getData= async()=>{\n    try{\n      const data= await getWeatherData(city); \n      const data1=await getWeatherData2(city);\n      setWeatherData(data);\n      setWeatherData2(data1);\n      //console.log(data);\n      //console.log(data1);\n      \n      \n    }\n    catch(error){\n      console.log(error.message);\n    }\n  }\n  useEffect(() => {\n    getData();\n  },[]);\n  useEffect(()=>{\n    fetch('/weathers')\n    .then(res=>{\n      if(res.ok){\n        return res.json()\n      }\n    }).then(jsonRes=>setWeathers(jsonRes));\n  })\n  function handleClick(event){\n    event.preventDefault();\n    const newWeather={\n      weatherCountry:weatherdata.name,\n      weatherTemperature:weatherdata2.current.temp_c,\n      weatherMaxTemperature:parseFloat(weatherdata.main.temp_max - 273.15).toFixed(1),\n      weatherMinTemperature:parseFloat(weatherdata.main.temp_min - 273.15).toFixed(1),\n\n    }\n    console.log(weatherdata.sys.country);\n    console.log(weatherdata2.current.temp_c)\n    axios.post('/create',newWeather)\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"card\">\n        <h2 className=\"title\"><i className=\"fa fa-cloud\"></i> WeatherApp</h2>\n        <div className=\"search\">\n          <input type=\"text\" onChange={(e)=>setCity(e.target.value)} placeholder=\"Enter the city name\"/>\n          <button type=\"button\" onClick={() =>getData()}>Search</button>\n          <div class=\"divider\"/>\n          <button onClick={handleClick}>Save</button>\n        </div>\n        {weatherdata2 !==null?(\n           <div className=\"main-container\">\n           <h4> Live Condition </h4>\n           <div className=\"weather-icon\">\n            <img src={`http://openweathermap.org/img/w/${weatherdata.weather[0].icon}.png`}alt=\"imgicon\"/>\n           </div>\n           <h3>{weatherdata.weather[0].main}</h3>\n           <div className=\"temperature\">\n             <h1>{parseFloat(weatherdata2.current.temp_c).toFixed(1)}&deg;</h1>\n           </div>\n           <div className=\"location\">\n             <h3><i className=\"fa fa-street-view\"></i>{weatherdata.name} | {weatherdata.sys.country}</h3>\n           </div>\n           <div className=\"temperature-range\">\n             <h6>Min:{parseFloat(weatherdata.main.temp_min - 273.15).toFixed(1)}&deg;C || Max:{parseFloat(weatherdata.main.temp_max - 273.15).toFixed(1)}&deg;C || Humidity:{weatherdata.main.humidity}%</h6>\n           </div>\n         </div>\n        ):null}\n       \n      </div>\n      <div className=\"weather-data\">\n        <h1> Weather Data</h1>\n        <table>\n            <thead>\n              <tr>\n                <th>City</th>\n                <th>Temperature</th>\n                <th>Max Temperature</th>\n                <th>Min Temperature</th>\n                <th>Action</th>\n              </tr>\n            </thead>\n       \n         <tbody>\n          {weathers.map((weather=>\n              <tr>\n              <td>{weather.weatherCountry}</td>\n              <td>{weather.weatherTemperature}&deg;C</td>\n              <td>{weather.weatherMaxTemperature}&deg;C</td>\n              <td>{weather.weatherMinTemperature}&deg;C</td>\n              <td>\n                  <button type=\"button\" onClick={()=> deleteWeather(weather._id)}>Delete</button>\n              </td>\n              </tr>\n          ))}\n          </tbody>\n          </table>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}